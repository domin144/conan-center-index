diff --git a/src/cmake/externalpackages.cmake b/src/cmake/externalpackages.cmake
index 957abe34d..cc5508b5c 100644
--- a/src/cmake/externalpackages.cmake
+++ b/src/cmake/externalpackages.cmake
@@ -112,19 +112,17 @@ if (MSVC AND NOT LINKSTATIC)
     add_definitions (-DOPENEXR_DLL) # Is this needed for new versions?
 endif ()
 
-if (OPENEXR_VERSION VERSION_GREATER_EQUAL 2.5.99)
+if (OpenEXR_VERSION VERSION_GREATER_EQUAL 2.5.99)
     set (OIIO_USING_IMATH 3)
 else ()
     set (OIIO_USING_IMATH 2)
 endif ()
 
-
-# JPEG -- prefer Turbo-JPEG to regular libjpeg
-checked_find_package (JPEGTurbo
-                      DEFINITIONS -DUSE_JPEG_TURBO=1
-                      PRINT       JPEG_INCLUDES JPEG_INCLUDE_DIRS
-                                  JPEG_LIBRARIES)
-if (NOT JPEG_FOUND) # Try to find the non-turbo version
+# JPEG -- prefer JPEG-Turbo to regular libjpeg
+checked_find_package (libjpeg-turbo
+                      VERSION_MIN 2.1
+                      DEFINITIONS -DUSE_JPEG_TURBO=1)
+if (NOT TARGET libjpeg-turbo::jpeg) # Try to find the non-turbo version
     checked_find_package (JPEG REQUIRED)
 endif ()
 
@@ -220,7 +218,9 @@ if (NOT Ptex_FOUND OR NOT Ptex_VERSION)
     checked_find_package (Ptex)
 endif ()
 
-checked_find_package (WebP)
+if (USE_LIBWEBP)
+    checked_find_package (WebP REQUIRED)
+endif ()
 
 option (USE_R3DSDK "Enable R3DSDK (RED camera) support" OFF)
 checked_find_package (R3DSDK)  # RED camera
@@ -291,7 +291,7 @@ endmacro()
 option (USE_EMBEDDED_LIBSQUISH
         "Force use of embedded Libsquish, even if external is found" OFF)
 if (NOT USE_EMBEDDED_LIBSQUISH)
-    checked_find_package (Libsquish)
+    checked_find_package (libsquish REQUIRED)
 endif ()
 
 
@@ -300,6 +300,7 @@ endif ()
 
 option (BUILD_FMT_FORCE "Force local download/build of fmt even if installed" OFF)
 option (BUILD_MISSING_FMT "Local download/build of fmt if not installed" ON)
+option (INTERNALIZE_FMT "Copy fmt headers into <install>/include/OpenImageIO/detail/fmt" ON)
 set (BUILD_FMT_VERSION "7.1.3" CACHE STRING "Preferred fmtlib/fmt version, when downloading/building our own")
 
 macro (find_or_download_fmt)
@@ -312,7 +313,7 @@ macro (find_or_download_fmt)
     # If an external copy wasn't found and we requested that missing
     # packages be built, or we we are forcing a local copy to be built, then
     # download and build it.
-    if ((BUILD_MISSING_FMT AND NOT FMT_FOUND) OR BUILD_FMT_FORCE)
+    if ((BUILD_MISSING_FMT AND NOT fmt_FOUND) OR BUILD_FMT_FORCE)
         message (STATUS "Downloading local fmtlib/fmt")
         set (FMT_INSTALL_DIR "${PROJECT_SOURCE_DIR}/ext/fmt")
         set (FMT_GIT_REPOSITORY "https://github.com/fmtlib/fmt")
@@ -329,9 +330,24 @@ macro (find_or_download_fmt)
             endif ()
         endif ()
         set (FMT_INCLUDE_DIR "${FMT_INSTALL_DIR}/include")
+        set (OIIO_USING_FMT_LOCAL TRUE)
+        file (STRINGS "${FMT_INCLUDE_DIR}/fmt/core.h" TMP REGEX "^#define FMT_VERSION .*$")
+        string (REGEX MATCHALL "[0-9]+" FMT_VERSION_NUMERIC ${TMP})
+        math(EXPR FMT_VERSION_PATCH "${FMT_VERSION_NUMERIC} % 100")
+        math(EXPR FMT_VERSION_MINOR "(${FMT_VERSION_NUMERIC} / 100) % 100")
+        math(EXPR FMT_VERSION_MAJOR "${FMT_VERSION_NUMERIC} / 10000")
+        set (fmt_VERSION "${FMT_VERSION_MAJOR}.${FMT_VERSION_MINOR}.${FMT_VERSION_PATCH}")
+    else ()
+        get_target_property(FMT_INCLUDE_DIR fmt::fmt-header-only INTERFACE_INCLUDE_DIRECTORIES)
+        set (OIIO_USING_FMT_LOCAL FALSE)
+        checked_find_package (fmt REQUIRED
+                              VERSION_MIN 7.0)
     endif ()
-    checked_find_package (fmt REQUIRED)
 endmacro()
 
 find_or_download_fmt()
-include_directories (${FMT_INCLUDES})
+
+if (fmt_VERSION VERSION_EQUAL 9.1.0
+        AND GCC_VERSION VERSION_GREATER 0.0 AND NOT GCC_VERSION VERSION_GREATER 7.2)
+    message (WARNING "${ColorRed}fmt 9.1 is known to not work with gcc <= 7.2${ColorReset}")
+endif ()
diff --git a/src/cmake/modules/FindJPEGTurbo.cmake b/src/cmake/modules/FindJPEGTurbo.cmake
deleted file mode 100644
index 39049dcce..000000000
--- a/src/cmake/modules/FindJPEGTurbo.cmake
+++ /dev/null
@@ -1,43 +0,0 @@
-# - Try to find libjpeg-turbo
-# Once done, this will define
-#
-#  JPEG_FOUND - system has libjpeg-turbo
-#  JPEG_INCLUDE_DIRS - the libjpeg-turbo include directories
-#  JPEG_LIBRARIES - link these to use libjpeg-turbo
-#
-
-include (FindPackageHandleStandardArgs)
-
-find_path(JPEG_INCLUDE_DIR turbojpeg.h
-          HINTS /usr/local/opt/jpeg-turbo/include
-          PATH_SUFFIXES include)
-set(JPEG_NAMES ${JPEG_NAMES} jpeg libjpeg turbojpeg libturbojpeg)
-
-find_library(JPEG_LIBRARY NAMES ${JPEG_NAMES}
-             HINTS ${JPEG_INCLUDE_DIR}/..
-                   /usr/local/opt/jpeg-turbo
-                   /opt/libjpeg-turbo
-             PATH_SUFFIXES lib lib64
-             NO_DEFAULT_PATH)
-if (NOT JPEG_LIBRARY)
-    find_library(JPEG_LIBRARY NAMES ${JPEG_NAMES}
-                 HINTS ${JPEG_INCLUDE_DIR}/..
-                       /usr/local/opt/jpeg-turbo
-                 PATH_SUFFIXES lib lib64)
-endif ()
-
-if (JPEG_INCLUDE_DIR AND JPEG_LIBRARY)
-  set (JPEG_INCLUDE_DIRS ${JPEG_INCLUDE_DIR} CACHE PATH "JPEG include dirs")
-  set (JPEG_LIBRARIES ${JPEG_LIBRARY} CACHE STRING "JPEG libraries")
-endif ()
-
-# handle the QUIETLY and REQUIRED arguments and set JPEG_FOUND to TRUE if
-# all listed variables are TRUE
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(JPEG DEFAULT_MSG JPEG_LIBRARIES JPEG_INCLUDE_DIRS)
-
-if (JPEG_FOUND)
-    set (JPEGTURBO_FOUND true)
-endif ()
-
-mark_as_advanced(JPEG_LIBRARIES JPEG_INCLUDE_DIRS )
-
diff --git a/src/cmake/modules/Findfmt.cmake b/src/cmake/modules/Findfmt.cmake
deleted file mode 100644
index a9e9bdeee..000000000
--- a/src/cmake/modules/Findfmt.cmake
+++ /dev/null
@@ -1,28 +0,0 @@
-# Find fmt library
-#
-# Sets the usual variables expected for find_package scripts:
-#
-# FMT_INCLUDES - header location
-# FMT_FOUND - true if fmt was found.
-# FMT_VERSION - combined version number (e.g. 60102 for 6.1.2)
-
-find_path (FMT_INCLUDE_DIR fmt/format.h
-           HINTS "${PROJECT_SOURCE_DIR}/ext/fmt"
-           )
-
-if (FMT_INCLUDE_DIR)
-    file(STRINGS "${FMT_INCLUDE_DIR}/fmt/core.h" TMP REGEX "^#define FMT_VERSION .*$")
-    string (REGEX MATCHALL "[0-9]+[.0-9]+" FMT_VERSION ${TMP})
-endif ()
-
-# Support the REQUIRED and QUIET arguments, and set FMT_FOUND if found.
-include (FindPackageHandleStandardArgs)
-find_package_handle_standard_args (fmt
-                                   REQUIRED_VARS FMT_INCLUDE_DIR
-                                   VERSION_VAR   FMT_VERSION)
-
-if (FMT_FOUND)
-    set (FMT_INCLUDES ${FMT_INCLUDE_DIR})
-endif ()
-
-mark_as_advanced (FMT_INCLUDE_DIR)
diff --git a/src/ffmpeg.imageio/CMakeLists.txt b/src/ffmpeg.imageio/CMakeLists.txt
index 614b88436..3d05bf0f2 100644
--- a/src/ffmpeg.imageio/CMakeLists.txt
+++ b/src/ffmpeg.imageio/CMakeLists.txt
@@ -2,13 +2,11 @@
 # SPDX-License-Identifier: BSD-3-Clause
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
-if (FFmpeg_FOUND)
+if (ffmpeg_FOUND)
     add_oiio_plugin (ffmpeginput.cpp
-                     INCLUDE_DIRS ${FFMPEG_INCLUDES}
-                     LINK_LIBRARIES ${FFMPEG_LIBRARIES}
-                                    ${BZIP2_LIBRARIES}
+                     LINK_LIBRARIES ffmpeg::avcodec ffmpeg::avformat ffmpeg::swscale
                      DEFINITIONS "-DUSE_FFMPEG"
-                                 "-DOIIO_FFMPEG_VERSION=\"${FFMPEG_VERSION}\"")
+                                 "-DOIIO_FFMPEG_VERSION=\"${ffmpeg_VERSION}\"")
 else()
     message (STATUS "FFmpeg not found: ffmpeg plugin will not be built")
 endif()
diff --git a/src/heif.imageio/CMakeLists.txt b/src/heif.imageio/CMakeLists.txt
index fed800154..884d13129 100644
--- a/src/heif.imageio/CMakeLists.txt
+++ b/src/heif.imageio/CMakeLists.txt
@@ -4,7 +4,7 @@
 
 if (Libheif_FOUND)
     add_oiio_plugin (heifinput.cpp heifoutput.cpp
-                     LINK_LIBRARIES Libheif::Libheif
+                     LINK_LIBRARIES heif
                      DEFINITIONS "-DUSE_HEIF=1")
 else ()
     message (WARNING "heif plugin will not be built")
diff --git a/src/include/CMakeLists.txt b/src/include/CMakeLists.txt
index 1ea81b649..44a6d974e 100644
--- a/src/include/CMakeLists.txt
+++ b/src/include/CMakeLists.txt
@@ -56,14 +56,44 @@ install (FILES ${detail_headers}
          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/detail
          COMPONENT developer)
 
-set (fmt_headers
-        ${FMT_INCLUDES}/fmt/core.h
-        ${FMT_INCLUDES}/fmt/format-inl.h
-        ${FMT_INCLUDES}/fmt/format.h
-        ${FMT_INCLUDES}/fmt/ostream.h
-        ${FMT_INCLUDES}/fmt/printf.h )
-file (COPY ${fmt_headers}
-      DESTINATION ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt)
+if (INTERNALIZE_FMT OR OIIO_USING_FMT_LOCAL)
+    set (fmt_headers_base_names core.h format-inl.h format.h ostream.h printf.h)
+    if (fmt_VERSION VERSION_GREATER_EQUAL 9)
+        list (APPEND fmt_headers_base_names std.h)
+    endif ()
+    set (fmt_internal_directory ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt)
+    list (TRANSFORM fmt_headers_base_names
+          PREPEND ${FMT_INCLUDE_DIR}/fmt/
+          OUTPUT_VARIABLE fmt_headers)
+    list (TRANSFORM fmt_headers_base_names
+          PREPEND ${fmt_internal_directory}/
+          OUTPUT_VARIABLE fmt_headers_internal)
+    add_custom_command (OUTPUT ${fmt_internal_directory}
+                        COMMAND
+                            ${CMAKE_COMMAND} -E make_directory
+                            ${fmt_internal_directory})
+    add_custom_command (OUTPUT ${fmt_headers_internal}
+                        DEPENDS ${fmt_headers} ${fmt_internal_directory}
+                        COMMAND
+                            ${CMAKE_COMMAND} -E copy
+                            ${fmt_headers}
+                            ${fmt_internal_directory})
+    add_custom_target (fmt_internal_target DEPENDS ${fmt_headers_internal})
+else ()
+    set (fmt_headers
+         ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt/format.h
+         ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt/ostream.h
+         ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt/printf.h )
+    foreach (f format.h ostream.h printf.h)
+        file (WRITE "${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt/${f}"
+                    "#include <fmt/${f}>")
+    endforeach ()
+    if (fmt_VERSION VERSION_GREATER_EQUAL 9)
+        list (APPEND fmt_headers ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt/std.h)
+        file (WRITE "${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt/std.h"
+                    "#include <fmt/std.h>")
+    endif ()
+endif ()
 install (FILES ${fmt_headers}
          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/detail/fmt
          COMPONENT developer)
diff --git a/src/jpeg.imageio/CMakeLists.txt b/src/jpeg.imageio/CMakeLists.txt
index 15d50cadf..07cce152f 100644
--- a/src/jpeg.imageio/CMakeLists.txt
+++ b/src/jpeg.imageio/CMakeLists.txt
@@ -3,5 +3,7 @@
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
 add_oiio_plugin (jpeginput.cpp jpegoutput.cpp
-                 INCLUDE_DIRS ${JPEG_INCLUDE_DIRS}
-                 LINK_LIBRARIES ${JPEG_LIBRARIES})
+                 LINK_LIBRARIES
+                     $<TARGET_NAME_IF_EXISTS:libjpeg-turbo::jpeg>
+                     $<TARGET_NAME_IF_EXISTS:JPEG::JPEG>
+                 )
diff --git a/src/libOpenImageIO/CMakeLists.txt b/src/libOpenImageIO/CMakeLists.txt
index 1e34593d9..e698e7902 100644
--- a/src/libOpenImageIO/CMakeLists.txt
+++ b/src/libOpenImageIO/CMakeLists.txt
@@ -153,7 +153,7 @@ target_link_libraries (OpenImageIO
         )
 
 if (FREETYPE_FOUND)
-    target_link_libraries (OpenImageIO PRIVATE ${FREETYPE_LIBRARIES})
+    target_link_libraries (OpenImageIO PRIVATE Freetype::Freetype)
 endif()
 
 if (WIN32)
diff --git a/src/libutil/CMakeLists.txt b/src/libutil/CMakeLists.txt
index 7de38836b..4223250db 100644
--- a/src/libutil/CMakeLists.txt
+++ b/src/libutil/CMakeLists.txt
@@ -30,6 +30,13 @@ target_link_libraries (OpenImageIO_Util
             ${CMAKE_DL_LIBS}
         )
 
+if (INTERNALIZE_FMT OR OIIO_USING_FMT_LOCAL)
+    add_dependencies(OpenImageIO_Util fmt_internal_target)
+else ()
+    target_link_libraries (OpenImageIO_Util
+                           PUBLIC fmt::fmt-header-only)
+endif ()
+
 if (WIN32)
     target_link_libraries (OpenImageIO_Util PRIVATE psapi)
 endif()
diff --git a/src/ptex.imageio/CMakeLists.txt b/src/ptex.imageio/CMakeLists.txt
index 2f47527a6..2775a8022 100644
--- a/src/ptex.imageio/CMakeLists.txt
+++ b/src/ptex.imageio/CMakeLists.txt
@@ -3,7 +3,11 @@
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
 if (Ptex_FOUND)
+    set(ptex_target Ptex::Ptex_dynamic)
+    if (TARGET Ptex::Ptex_static AND (NOT TARGET Ptex::Ptex_dynamic OR LINKSTATIC))
+        set(ptex_target Ptex::Ptex_static)
+    endif()
     add_oiio_plugin (ptexinput.cpp
-                     LINK_LIBRARIES Ptex::Ptex_dynamic ZLIB::ZLIB
+                     LINK_LIBRARIES ${ptex_target} ZLIB::ZLIB
                      DEFINITIONS "-DUSE_PTEX")
 endif ()
diff --git a/src/tiff.imageio/CMakeLists.txt b/src/tiff.imageio/CMakeLists.txt
index ab94d56db..d1e4db996 100644
--- a/src/tiff.imageio/CMakeLists.txt
+++ b/src/tiff.imageio/CMakeLists.txt
@@ -4,5 +4,8 @@
 
 add_oiio_plugin (tiffinput.cpp tiffoutput.cpp
                  INCLUDE_DIRS ${TIFF_INCLUDE_DIR}
-                 LINK_LIBRARIES ${TIFF_LIBRARIES} ${JPEG_LIBRARIES}
-                                ZLIB::ZLIB)
+		 LINK_LIBRARIES ${TIFF_LIBRARIES}
+				ZLIB::ZLIB
+				$<TARGET_NAME_IF_EXISTS:libjpeg-turbo::jpeg>
+                                $<TARGET_NAME_IF_EXISTS:JPEG::JPEG>
+                 )
diff --git a/src/webp.imageio/CMakeLists.txt b/src/webp.imageio/CMakeLists.txt
index 44462c499..060e36b94 100644
--- a/src/webp.imageio/CMakeLists.txt
+++ b/src/webp.imageio/CMakeLists.txt
@@ -4,7 +4,7 @@
 
 if (WebP_FOUND)
     add_oiio_plugin (webpinput.cpp webpoutput.cpp
-                     LINK_LIBRARIES WebP::WebP WebP::WebPDemux
+                     LINK_LIBRARIES WebP::webp WebP::webpdemux
                      DEFINITIONS "-DUSE_WEBP=1")
 else ()
     message (STATUS "WebP plugin will not be built")
