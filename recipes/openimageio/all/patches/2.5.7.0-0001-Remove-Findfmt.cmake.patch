diff --git a/src/cmake/externalpackages.cmake b/src/cmake/externalpackages.cmake
index 3cfaedd57..467444491 100644
--- a/src/cmake/externalpackages.cmake
+++ b/src/cmake/externalpackages.cmake
@@ -332,7 +332,7 @@ macro (find_or_download_fmt)
     # If an external copy wasn't found and we requested that missing
     # packages be built, or we we are forcing a local copy to be built, then
     # download and build it.
-    if ((BUILD_MISSING_FMT AND NOT FMT_FOUND) OR BUILD_FMT_FORCE)
+    if ((BUILD_MISSING_FMT AND NOT fmt_FOUND) OR BUILD_FMT_FORCE)
         message (STATUS "Downloading local fmtlib/fmt")
         set (FMT_INSTALL_DIR "${PROJECT_SOURCE_DIR}/ext/fmt")
         set (FMT_GIT_REPOSITORY "https://github.com/fmtlib/fmt")
@@ -350,16 +350,23 @@ macro (find_or_download_fmt)
         endif ()
         set (FMT_INCLUDE_DIR "${FMT_INSTALL_DIR}/include")
         set (OIIO_USING_FMT_LOCAL TRUE)
+        file (STRINGS "${FMT_INCLUDE_DIR}/fmt/core.h" TMP REGEX "^#define FMT_VERSION .*$")
+        string (REGEX MATCHALL "[0-9]+" FMT_VERSION_NUMERIC ${TMP})
+        math(EXPR FMT_VERSION_PATCH "${FMT_VERSION_NUMERIC} % 100")
+        math(EXPR FMT_VERSION_MINOR "(${FMT_VERSION_NUMERIC} / 100) % 100")
+        math(EXPR FMT_VERSION_MAJOR "${FMT_VERSION_NUMERIC} / 10000")
+        set (fmt_VERSION "${FMT_VERSION_MAJOR}.${FMT_VERSION_MINOR}.${FMT_VERSION_PATCH}")
     else ()
+        get_target_property(FMT_INCLUDE_DIR fmt::fmt-header-only INTERFACE_INCLUDE_DIRECTORIES)
         set (OIIO_USING_FMT_LOCAL FALSE)
+        checked_find_package (fmt REQUIRED
+                              VERSION_MIN 7.0)
     endif ()
-    checked_find_package (fmt REQUIRED
-                          VERSION_MIN 7.0)
 endmacro()
 
 find_or_download_fmt()
 
-if (FMT_VERSION VERSION_EQUAL 90100
+if (fmt_VERSION VERSION_EQUAL 9.1.0
         AND GCC_VERSION VERSION_GREATER 0.0 AND NOT GCC_VERSION VERSION_GREATER 7.2)
     message (WARNING "${ColorRed}fmt 9.1 is known to not work with gcc <= 7.2${ColorReset}")
 endif ()
diff --git a/src/cmake/modules/Findfmt.cmake b/src/cmake/modules/Findfmt.cmake
deleted file mode 100644
index 9ee436da3..000000000
--- a/src/cmake/modules/Findfmt.cmake
+++ /dev/null
@@ -1,32 +0,0 @@
-# Find fmt library
-#
-# Copyright Contributors to the OpenImageIO project.
-# SPDX-License-Identifier: Apache-2.0
-# https://github.com/AcademySoftwareFoundation/OpenImageIO
-#
-# Sets the usual variables expected for find_package scripts:
-#
-# FMT_INCLUDES - header location
-# FMT_FOUND - true if fmt was found.
-# FMT_VERSION - combined version number (e.g. 60102 for 6.1.2)
-
-find_path (FMT_INCLUDE_DIR fmt/format.h
-           HINTS "${PROJECT_SOURCE_DIR}/ext/fmt"
-           )
-
-if (FMT_INCLUDE_DIR)
-    file(STRINGS "${FMT_INCLUDE_DIR}/fmt/core.h" TMP REGEX "^#define FMT_VERSION .*$")
-    string (REGEX MATCHALL "[0-9]+[.0-9]+" FMT_VERSION ${TMP})
-endif ()
-
-# Support the REQUIRED and QUIET arguments, and set FMT_FOUND if found.
-include (FindPackageHandleStandardArgs)
-find_package_handle_standard_args (fmt
-                                   REQUIRED_VARS FMT_INCLUDE_DIR
-                                   VERSION_VAR   FMT_VERSION)
-
-if (FMT_FOUND)
-    set (FMT_INCLUDES ${FMT_INCLUDE_DIR})
-endif ()
-
-mark_as_advanced (FMT_INCLUDE_DIR)
diff --git a/src/ffmpeg.imageio/CMakeLists.txt b/src/ffmpeg.imageio/CMakeLists.txt
index 8e47a8443..e1a1987fe 100644
--- a/src/ffmpeg.imageio/CMakeLists.txt
+++ b/src/ffmpeg.imageio/CMakeLists.txt
@@ -2,7 +2,7 @@
 # SPDX-License-Identifier: Apache-2.0
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
-if (FFmpeg_FOUND)
+if (ffmpeg_FOUND)
     if (LINKSTATIC)
         set (_static_suffixes .lib .a)
         set (_static_libraries_found 0)
@@ -26,11 +26,9 @@ if (FFmpeg_FOUND)
     endif()
 
     add_oiio_plugin (ffmpeginput.cpp
-                     INCLUDE_DIRS ${FFMPEG_INCLUDES}
-                     LINK_LIBRARIES ${FFMPEG_LIBRARIES}
-                                    ${BZIP2_LIBRARIES}
+                     LINK_LIBRARIES ffmpeg::avcodec ffmpeg::avformat ffmpeg::swscale
                      DEFINITIONS "-DUSE_FFMPEG"
-                                 "-DOIIO_FFMPEG_VERSION=\"${FFMPEG_VERSION}\"")
+                                 "-DOIIO_FFMPEG_VERSION=\"${ffmpeg_VERSION}\"")
 else()
     message (STATUS "FFmpeg not found: ffmpeg plugin will not be built")
 endif()
diff --git a/src/heif.imageio/CMakeLists.txt b/src/heif.imageio/CMakeLists.txt
index 5b6c30a85..7b511e0e5 100644
--- a/src/heif.imageio/CMakeLists.txt
+++ b/src/heif.imageio/CMakeLists.txt
@@ -26,8 +26,7 @@ if (Libheif_FOUND)
     endif()
 
     add_oiio_plugin (heifinput.cpp heifoutput.cpp
-                     INCLUDE_DIRS ${LIBHEIF_INCLUDES}
-                     LINK_LIBRARIES ${LIBHEIF_LIBRARIES}
+                     LINK_LIBRARIES heif
                      DEFINITIONS "-DUSE_HEIF=1")
 else ()
     message (WARNING "heif plugin will not be built")
diff --git a/src/include/CMakeLists.txt b/src/include/CMakeLists.txt
index 006cb65a7..98ba2dc24 100644
--- a/src/include/CMakeLists.txt
+++ b/src/include/CMakeLists.txt
@@ -65,17 +65,28 @@ install (FILES ${detail_headers}
          COMPONENT developer)
 
 if (INTERNALIZE_FMT OR OIIO_USING_FMT_LOCAL)
-    set (fmt_headers
-         ${FMT_INCLUDES}/fmt/core.h
-         ${FMT_INCLUDES}/fmt/format-inl.h
-         ${FMT_INCLUDES}/fmt/format.h
-         ${FMT_INCLUDES}/fmt/ostream.h
-         ${FMT_INCLUDES}/fmt/printf.h )
-    if (fmt_VERSION VERSION_GREATER_EQUAL 90000)
-        list (APPEND fmt_headers ${FMT_INCLUDES}/fmt/std.h)
+    set (fmt_headers_base_names core.h format-inl.h format.h ostream.h printf.h)
+    if (fmt_VERSION VERSION_GREATER_EQUAL 9)
+        list (APPEND fmt_headers_base_names std.h)
     endif ()
-    file (COPY ${fmt_headers}
-          DESTINATION ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt)
+    set (fmt_internal_directory ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt)
+    list (TRANSFORM fmt_headers_base_names
+          PREPEND ${FMT_INCLUDE_DIR}/fmt/
+          OUTPUT_VARIABLE fmt_headers)
+    list (TRANSFORM fmt_headers_base_names
+          PREPEND ${fmt_internal_directory}/
+          OUTPUT_VARIABLE fmt_headers_internal)
+    add_custom_command (OUTPUT ${fmt_internal_directory}
+                        COMMAND
+                            ${CMAKE_COMMAND} -E make_directory
+                            ${fmt_internal_directory})
+    add_custom_command (OUTPUT ${fmt_headers_internal}
+                        DEPENDS ${fmt_headers} ${fmt_internal_directory}
+                        COMMAND
+                            ${CMAKE_COMMAND} -E copy
+                            ${fmt_headers}
+                            ${fmt_internal_directory})
+    add_custom_target (fmt_internal_target DEPENDS ${fmt_headers_internal})
 else ()
     set (fmt_headers
          ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt/format.h
@@ -85,7 +96,7 @@ else ()
         file (WRITE "${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt/${f}"
                     "#include <fmt/${f}>")
     endforeach ()
-    if (fmt_VERSION VERSION_GREATER_EQUAL 90000)
+    if (fmt_VERSION VERSION_GREATER_EQUAL 9)
         list (APPEND fmt_headers ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt/std.h)
         file (WRITE "${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt/std.h"
                     "#include <fmt/std.h>")
diff --git a/src/libOpenImageIO/CMakeLists.txt b/src/libOpenImageIO/CMakeLists.txt
index 9972a7150..252681126 100644
--- a/src/libOpenImageIO/CMakeLists.txt
+++ b/src/libOpenImageIO/CMakeLists.txt
@@ -158,7 +158,7 @@ target_link_libraries (OpenImageIO
         )
 
 if (FREETYPE_FOUND)
-    target_link_libraries (OpenImageIO PRIVATE ${FREETYPE_LIBRARIES})
+    target_link_libraries (OpenImageIO PRIVATE Freetype::Freetype)
 endif()
 
 if (WIN32)
@@ -169,7 +169,12 @@ if (MINGW)
     target_link_libraries (OpenImageIO PRIVATE ws2_32)
 endif()
 
-
+if (INTERNALIZE_FMT OR OIIO_USING_FMT_LOCAL)
+    add_dependencies(OpenImageIO_Util fmt_internal_target)
+else ()
+    target_link_libraries (OpenImageIO_Util
+                           PUBLIC fmt::fmt-header-only)
+endif ()
 
 file (GLOB iba_sources "imagebufalgo_*.cpp")
 if (MSVC)
diff --git a/src/libutil/CMakeLists.txt b/src/libutil/CMakeLists.txt
index 10cc4b0c4..f873b3eed 100644
--- a/src/libutil/CMakeLists.txt
+++ b/src/libutil/CMakeLists.txt
@@ -27,11 +27,11 @@ target_link_libraries (OpenImageIO_Util
             ${CMAKE_DL_LIBS}
         )
 
-if (NOT OIIO_USING_FMT_LOCAL)
-    target_include_directories (OpenImageIO_Util
-                                PUBLIC ${FMT_INCLUDES} )
+if (INTERNALIZE_FMT OR OIIO_USING_FMT_LOCAL)
+    add_dependencies(OpenImageIO_Util fmt_internal_target)
+else ()
     target_link_libraries (OpenImageIO_Util
-                           PUBLIC $<TARGET_NAME_IF_EXISTS:fmt::fmt> )
+                           PUBLIC fmt::fmt-header-only)
 endif ()
 
 if (WIN32)
