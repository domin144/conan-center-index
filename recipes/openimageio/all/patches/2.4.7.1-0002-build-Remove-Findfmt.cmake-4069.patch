From 9e09febfce13ef8efa68b2b62abfae08adea3277 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dominik=20W=C3=B3jt?= <domin144@o2.pl>
Date: Fri, 5 Jan 2024 19:47:38 +0100
Subject: build: Remove Findfmt.cmake (#4069)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

fmt provides cmake config files since at least version 7.0.0, which is
the minimum version supported.
Fixed some variable names, so the provided config can be used.
The previous variable names were missing, if the library was installed
in a custom location,
like in case of manual build or provided by conan.

---------

Signed-off-by: Dominik WÃ³jt <domin144@o2.pl>
---
 src/cmake/externalpackages.cmake  | 17 +++++++++++++--
 src/cmake/modules/Findfmt.cmake   | 28 -------------------------
 src/include/CMakeLists.txt        | 35 ++++++++++++++++++++++++-------
 src/libOpenImageIO/CMakeLists.txt |  2 --
 src/libutil/CMakeLists.txt        |  8 +++----
 5 files changed, 46 insertions(+), 44 deletions(-)
 delete mode 100644 src/cmake/modules/Findfmt.cmake

diff --git a/src/cmake/externalpackages.cmake b/src/cmake/externalpackages.cmake
index 48e871418..94b48523c 100644
--- a/src/cmake/externalpackages.cmake
+++ b/src/cmake/externalpackages.cmake
@@ -321,7 +321,7 @@ macro (find_or_download_fmt)
     # If an external copy wasn't found and we requested that missing
     # packages be built, or we we are forcing a local copy to be built, then
     # download and build it.
-    if ((BUILD_MISSING_FMT AND NOT FMT_FOUND) OR BUILD_FMT_FORCE)
+    if ((BUILD_MISSING_FMT AND NOT fmt_FOUND) OR BUILD_FMT_FORCE)
         message (STATUS "Downloading local fmtlib/fmt")
         set (FMT_INSTALL_DIR "${PROJECT_SOURCE_DIR}/ext/fmt")
         set (FMT_GIT_REPOSITORY "https://github.com/fmtlib/fmt")
@@ -339,10 +339,23 @@ macro (find_or_download_fmt)
         endif ()
         set (FMT_INCLUDE_DIR "${FMT_INSTALL_DIR}/include")
         set (OIIO_USING_FMT_LOCAL TRUE)
+        file (STRINGS "${FMT_INCLUDE_DIR}/fmt/core.h" TMP REGEX "^#define FMT_VERSION .*$")
+        string (REGEX MATCHALL "[0-9]+" FMT_VERSION_NUMERIC ${TMP})
+        math(EXPR FMT_VERSION_PATCH "${FMT_VERSION_NUMERIC} % 100")
+        math(EXPR FMT_VERSION_MINOR "(${FMT_VERSION_NUMERIC} / 100) % 100")
+        math(EXPR FMT_VERSION_MAJOR "${FMT_VERSION_NUMERIC} / 10000")
+        set (fmt_VERSION "${FMT_VERSION_MAJOR}.${FMT_VERSION_MINOR}.${FMT_VERSION_PATCH}")
     else ()
+        get_target_property(FMT_INCLUDE_DIR fmt::fmt-header-only INTERFACE_INCLUDE_DIRECTORIES)
         set (OIIO_USING_FMT_LOCAL FALSE)
+        checked_find_package (fmt REQUIRED
+                              VERSION_MIN 7.0)
     endif ()
-    checked_find_package (fmt REQUIRED)
 endmacro()
 
 find_or_download_fmt()
+
+if (fmt_VERSION VERSION_EQUAL 9.1.0
+        AND GCC_VERSION VERSION_GREATER 0.0 AND NOT GCC_VERSION VERSION_GREATER 7.2)
+    message (WARNING "${ColorRed}fmt 9.1 is known to not work with gcc <= 7.2${ColorReset}")
+endif ()
diff --git a/src/cmake/modules/Findfmt.cmake b/src/cmake/modules/Findfmt.cmake
deleted file mode 100644
index a9e9bdeee..000000000
--- a/src/cmake/modules/Findfmt.cmake
+++ /dev/null
@@ -1,28 +0,0 @@
-# Find fmt library
-#
-# Sets the usual variables expected for find_package scripts:
-#
-# FMT_INCLUDES - header location
-# FMT_FOUND - true if fmt was found.
-# FMT_VERSION - combined version number (e.g. 60102 for 6.1.2)
-
-find_path (FMT_INCLUDE_DIR fmt/format.h
-           HINTS "${PROJECT_SOURCE_DIR}/ext/fmt"
-           )
-
-if (FMT_INCLUDE_DIR)
-    file(STRINGS "${FMT_INCLUDE_DIR}/fmt/core.h" TMP REGEX "^#define FMT_VERSION .*$")
-    string (REGEX MATCHALL "[0-9]+[.0-9]+" FMT_VERSION ${TMP})
-endif ()
-
-# Support the REQUIRED and QUIET arguments, and set FMT_FOUND if found.
-include (FindPackageHandleStandardArgs)
-find_package_handle_standard_args (fmt
-                                   REQUIRED_VARS FMT_INCLUDE_DIR
-                                   VERSION_VAR   FMT_VERSION)
-
-if (FMT_FOUND)
-    set (FMT_INCLUDES ${FMT_INCLUDE_DIR})
-endif ()
-
-mark_as_advanced (FMT_INCLUDE_DIR)
diff --git a/src/include/CMakeLists.txt b/src/include/CMakeLists.txt
index 52b0936a6..cb859f106 100644
--- a/src/include/CMakeLists.txt
+++ b/src/include/CMakeLists.txt
@@ -65,14 +65,28 @@ install (FILES ${detail_headers}
          COMPONENT developer)
 
 if (INTERNALIZE_FMT OR OIIO_USING_FMT_LOCAL)
-    set (fmt_headers
-         ${FMT_INCLUDES}/fmt/core.h
-         ${FMT_INCLUDES}/fmt/format-inl.h
-         ${FMT_INCLUDES}/fmt/format.h
-         ${FMT_INCLUDES}/fmt/ostream.h
-         ${FMT_INCLUDES}/fmt/printf.h )
-    file (COPY ${fmt_headers}
-          DESTINATION ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt)
+    set (fmt_headers_base_names core.h format-inl.h format.h ostream.h printf.h)
+    if (fmt_VERSION VERSION_GREATER_EQUAL 9)
+        list (APPEND fmt_headers_base_names std.h)
+    endif ()
+    set (fmt_internal_directory ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt)
+    list (TRANSFORM fmt_headers_base_names
+          PREPEND ${FMT_INCLUDE_DIR}/fmt/
+          OUTPUT_VARIABLE fmt_headers)
+    list (TRANSFORM fmt_headers_base_names
+          PREPEND ${fmt_internal_directory}/
+          OUTPUT_VARIABLE fmt_headers_internal)
+    add_custom_command (OUTPUT ${fmt_internal_directory}
+                        COMMAND
+                            ${CMAKE_COMMAND} -E make_directory
+                            ${fmt_internal_directory})
+    add_custom_command (OUTPUT ${fmt_headers_internal}
+                        DEPENDS ${fmt_headers} ${fmt_internal_directory}
+                        COMMAND
+                            ${CMAKE_COMMAND} -E copy
+                            ${fmt_headers}
+                            ${fmt_internal_directory})
+    add_custom_target (fmt_internal_target DEPENDS ${fmt_headers_internal})
 else ()
     set (fmt_headers
          ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt/format.h
@@ -82,6 +96,11 @@ else ()
         file (WRITE "${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt/${f}"
                     "#include <fmt/${f}>")
     endforeach ()
+    if (fmt_VERSION VERSION_GREATER_EQUAL 9)
+        list (APPEND fmt_headers ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt/std.h)
+        file (WRITE "${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt/std.h"
+                    "#include <fmt/std.h>")
+    endif ()
 endif ()
 install (FILES ${fmt_headers}
          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/detail/fmt
diff --git a/src/libOpenImageIO/CMakeLists.txt b/src/libOpenImageIO/CMakeLists.txt
index 456aab81a..cb11b625c 100644
--- a/src/libOpenImageIO/CMakeLists.txt
+++ b/src/libOpenImageIO/CMakeLists.txt
@@ -157,8 +157,6 @@ if (MINGW)
     target_link_libraries (OpenImageIO PRIVATE ws2_32)
 endif()
 
-
-
 file (GLOB iba_sources "imagebufalgo_*.cpp")
 if (MSVC)
     # In some MSVC setups, the IBA functions with huge template expansions
diff --git a/src/libutil/CMakeLists.txt b/src/libutil/CMakeLists.txt
index 09b9139d0..a4e578b51 100644
--- a/src/libutil/CMakeLists.txt
+++ b/src/libutil/CMakeLists.txt
@@ -23,11 +23,11 @@ target_link_libraries (OpenImageIO_Util
             ${CMAKE_DL_LIBS}
         )
 
-if (NOT OIIO_USING_FMT_LOCAL)
-    target_include_directories (OpenImageIO_Util
-                                PUBLIC ${FMT_INCLUDES} )
+if (INTERNALIZE_FMT OR OIIO_USING_FMT_LOCAL)
+    add_dependencies(OpenImageIO_Util fmt_internal_target)
+else ()
     target_link_libraries (OpenImageIO_Util
-                           PUBLIC $<TARGET_NAME_IF_EXISTS:fmt::fmt> )
+                           PUBLIC fmt::fmt-header-only)
 endif ()
 
 if (WIN32)
-- 
2.39.2

